CREATE SCHEMA users;

CREATE TABLE users.user (
    user_id SERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL UNIQUE,
    phone_number VARCHAR(20),
    username VARCHAR(30),
    profile_photo VARCHAR(50),
    last_login TIMESTAMP DEFAULT current_timestamp,
    sign_up DATE DEFAULT current_date,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    language_code VARCHAR(2),
    referral_link VARCHAR(150),
    active BOOLEAN DEFAULT false
);

CREATE TABLE users.premium (
    user_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES users.user(user_id),
    status BOOLEAN DEFAULT false,
    last_payment timestamp,
    discout varchar(50) DEFAULT NULL
);

CREATE TABLE users.user_notification (
    id SERIAL PRIMARY KEY,
    user_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES users.user(user_id),
    notification_type VARCHAR(50),
    notify_time VARCHAR(50),
    created TIMESTAMP DEFAULT current_timestamp,
    active BOOLEAN DEFAULT true,
    condition VARCHAR(50)
);

CREATE TABLE users.notification (
    type INTEGER,
    FOREIGN KEY (type) REFERENCES users.user_notification(id),
    date TIMESTAMP DEFAULT current_timestamp,
    text TEXT,
    status BOOLEAN
);

CREATE TABLE users.referral_list (
    user_id INTEGER,
    FOREIGN KEY (user_id) REFERENCES users.user(user_id),
    referred_id INTEGER UNIQUE,
    FOREIGN KEY (referred_id) REFERENCES users.user(user_id),
    requested BOOLEAN DEFAULT false,
    cash INTEGER
);

CREATE SCHEMA data_history;

CREATE TABLE data_history.funding (
    stock_id SERIAL PRIMARY KEY,
    symbol VARCHAR(20) UNIQUE NOT NULL,
    company_name VARCHAR(100)
);

CREATE TABLE data_history.funding_data (
    stock_id INTEGER REFERENCES data_history.funding(stock_id),
    funding_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    funding_rate NUMERIC(12, 11),
    mark_price NUMERIC(20, 8)
);

CREATE INDEX idx_stock_time ON data_history.funding_data(stock_id, funding_time);

CREATE TABLE data_history.funding_data (
    stock_id INTEGER REFERENCES data_history.funding(stock_id),
    price_change NUMERIC(12, 11),
    price_change_percent NUMERIC(7, 3),
    weighted_avg_price NUMERIC(12, 11),
    last_price NUMERIC(12, 11),
    last_qty NUMERIC(12, 11),
    open_price NUMERIC(12, 11),
    high_price NUMERIC(12, 11),
    volume NUMERIC(12, 11),
    quote_volume NUMERIC(12, 11),
    open_time NUMERIC(12, 11),
    close_time NUMERIC(12, 11),
    first_id INTEGER,
    last_id INTEGER,
    count INTEGER
);


